---
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";

// Define LyricsTypes for consistency with chords and lyrics pages
interface LyricsTypes {
  url: string;
  title: string;
  lyrics: string | null;
  chords: string | null;
  description: string | null;
  album: string | null;
  artist: string | null;
  category: string | null;
  pub_date: string | null;
  key: string | null;
  tags: string | null;
  primary_language: string | null;
  secondary_languages: string | null;
}

const method = Astro.request.method;
const formData = method === 'POST' ? await Astro.request.formData() : null;

let message: string | null = null;

if (method === 'POST' && formData) {
  const title = formData.get('title')?.toString() || '';
  const generatedUrl = title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
  
  const song: LyricsTypes = {
    url: generatedUrl,
    title: title,
    lyrics: formData.get('lyrics')?.toString() || null,
    chords: formData.get('chords')?.toString() || null,
    description: formData.get('description')?.toString() || null,
    album: formData.get('album')?.toString() || null,
    artist: formData.get('artist')?.toString() || null,
    category: formData.get('category')?.toString() || null,
    pub_date: formData.get('pub_date')?.toString() || null,
    key: formData.get('key')?.toString() || null,
    tags: formData.get('tags')?.toString() || null,
    primary_language: formData.get('primary_language')?.toString() || null,
    secondary_languages: formData.get('secondary_languages') ? Array.from(formData.getAll('secondary_languages')).join(',') : null,
  };

  try {
    const db = Astro.locals.runtime.env.DB as import('astro').AstroGlobal['locals']['runtime']['env']['DB'];

    await db.prepare(`
      INSERT INTO songs (
        url, title, lyrics, chords, description, album, artist,
        category, pub_date, key, tags, primary_language, secondary_languages
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `)
    .bind(
      song.url,
      song.title,
      song.lyrics,
      song.chords,
      song.description,
      song.album,
      song.artist,
      song.category,
      song.pub_date,
      song.key,
      song.tags,
      song.primary_language,
      song.secondary_languages
    )
    .run();

    message = '✅ Song uploaded successfully!';
  } catch (err: any) {
    message = `❌ Error uploading song: ${err.message}`;
  }
}

const musicalKeys = [
  'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 
  'G', 'G#', 'A', 'A#', 'B',
  'Cm', 'C#m', 'Dm', 'D#m', 'Em', 'Fm', 
  'F#m', 'Gm', 'G#m', 'Am', 'A#m', 'Bm'
];

const indianLanguages = [
  'English', 'Telugu', 'Tamil', 'Malayalam', 'Kannada'
];

const isLoggedIn = Astro.cookies.get('session')?.value === 'logged_in';

if (!isLoggedIn) {
  return Astro.redirect('/admin/login');
}
---

<Layout
  title="Christian Lyrics"
  description="Collection of Christian worship lyrics"
>
  <!-- Include Flowbite CSS and JS -->
  <link rel="stylesheet" href="https://unpkg.com/flowbite@1.5.3/dist/flowbite.min.css" />
  
  <div class="container mx-auto px-4 py-4 flex justify-between items-center">
    <h1 class="text-xl font-bold text-gray-900 dark:text-white">Admin Panel</h1>
    <div class="flex items-center gap-4">
      <button id="theme-toggle" type="button" class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5">
        <svg id="theme-toggle-dark-icon" class="w-5 h-5 hidden" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg>
        <svg id="theme-toggle-light-icon" class="w-5 h-5 hidden" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4.586 2.414a1 1 0 011.414 1.414l-.707.707a1 1 0 11-1.414-1.414l.707-.707zM16 10a1 1 0 011-1h1a1 1 0 110 2h-1a1 1 0 01-1-1zm-1.414 4.586a1 1 0 011.414 0l.707.707a1 1 0 01-1.414 1.414l-.707-.707a1 1 0 010-1.414zM10 16a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zm-4.586-1.414a1 1 0 010 1.414l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 0zM3 10a1 1 0 011-1h1a1 1 0 110 2H4a1 1 0 01-1-1zm1.414-4.586l.707-.707a1 1 0 011.414 1.414l-.707.707a1 1 0 01-1.414-1.414zM10 14a4 4 0 100-8 4 4 0 000 8z"></path></svg>
      </button>
      <form action="/api/logout" method="POST">
        <button type="submit" class="text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-red-600 dark:hover:bg-red-700 focus:outline-none dark:focus:ring-red-800">
          Sign Out
        </button>
      </form>
    </div>
  </div>

  {message && (
    <div class={`p-4 mb-4 text-sm rounded-lg ${message.startsWith('✅') ? 'bg-green-50 text-green-800 dark:bg-green-800 dark:text-green-400' : 'bg-red-50 text-red-800 dark:bg-red-800 dark:text-red-400'}`} role="alert">
      {message}
    </div>
  )}

  <div class="container mx-auto px-4 py-8">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
      <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6 text-center">Upload New Song</h2>
      
      <form method="POST" class="space-y-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="space-y-6">
            <div>
              <label for="url" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">URL (auto-generated)</label>
              <input type="text" name="url" id="url" disabled 
                     class="bg-gray-100 border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5 cursor-not-allowed dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-gray-400">
            </div>
            
            <div>
              <label for="title" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Title*</label>
              <input type="text" name="title" id="title" required 
                     class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-400 dark:focus:border-blue-400">
            </div>
            
            <div>
              <label for="artist" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Artist</label>
              <input type="text" name="artist" id="artist"
                     class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-400 dark:focus:border-blue-400">
            </div>
            
            <div>
              <label for="album" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Album</label>
              <input type="text" name="album" id="album"
                     class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-400 dark:focus:border-blue-400">
            </div>
          </div>
          
          <div class="space-y-6">
            <div>
              <label for="category" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Category</label>
              <input type="text" name="category" id="category"
                     class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-400 dark:focus:border-blue-400">
            </div>
            
            <div>
              <label for="key" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Key</label>
              <select name="key" id="key" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-400 dark:focus:border-blue-400">
                <option value="">Select Key</option>
                {musicalKeys.map(key => (
                  <option value={key}>{key}</option>
                ))}
              </select>
            </div>
            
            <div>
              <label for="primary_language" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Primary Language*</label>
              <select name="primary_language" id="primary_language" required class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-400 dark:focus:border-blue-400">
                <option value="">Select Primary Language</option>
                {indianLanguages.map(lang => (
                  <option value={lang}>{lang}</option>
                ))}
              </select>
            </div>
            
            <div>
              <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Secondary Languages</label>
              <div class="max-h-40 overflow-y-auto border border-gray-300 rounded-lg p-4 dark:border-gray-600 dark:bg-gray-700">
                {indianLanguages.map(lang => (
                  <label class="flex items-center space-x-3 mb-3">
                    <input type="checkbox" name="secondary_languages" value={lang} 
                           class="w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600" />
                    <span class="text-sm font-medium text-gray-900 dark:text-white">{lang}</span>
                  </label>
                ))}
              </div>
            </div>
            
            <div>
              <label for="tags" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Tags</label>
              <input type="text" name="tags" id="tags"
                     class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-400 dark:focus:border-blue-400">
            </div>
            
            <div>
              <label for="pub_date" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Publish Date</label>
              <input type="datetime-local" name="pub_date" id="pub_date"
                     class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-400 dark:focus:border-blue-400">
            </div>
          </div>
        </div>
        
        <div>
          <label for="lyrics" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Lyrics*</label>
          <textarea name="lyrics" id="lyrics" required rows="10"
                   class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-400 dark:focus:border-blue-400"
                   placeholder="Enter lyrics in ChordPro format, e.g., {verse}...{chorus}..."></textarea>
        </div>
        
        <div>
          <label for="chords" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Chords</label>
          <textarea name="chords" id="chords" rows="10"
                   class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-400 dark:focus:border-blue-400"
                   placeholder="Enter chords in format: [Verse] *C*Lord *G*we *Am*pray *F*today..."></textarea>
        </div>
        
        <div>
          <label for="description" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Description</label>
          <textarea name="description" id="description" rows="4"
                   class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-400 dark:focus:border-blue-400"></textarea>
        </div>
        
        <div class="flex justify-center">
          <button type="submit" 
                  class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">
            Upload Song
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Flowbite JS -->
  <script src="https://unpkg.com/flowbite@1.5.3/dist/flowbite.min.js"></script>
  
  <script>
    const titleInput = document.getElementById('title');
    const urlInput = document.getElementById('url');

    if (titleInput && urlInput) {
      titleInput.addEventListener('input', () => {
        const title = titleInput.value;
        const generatedUrl = title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
        urlInput.value = generatedUrl;
      });
    }

    // Dark mode toggle
    const themeToggleBtn = document.getElementById('theme-toggle');
    const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
    const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');

    if (themeToggleBtn && themeToggleDarkIcon && themeToggleLightIcon) {
      // Set initial icon state
      const isDark = localStorage.getItem('theme') === 'dark' || 
                    (!localStorage.getItem('theme') && window.matchMedia('(prefers-color-scheme: dark)').matches);
      
      if (isDark) {
        document.documentElement.classList.add('dark');
        themeToggleLightIcon.classList.remove('hidden');
      } else {
        themeToggleDarkIcon.classList.remove('hidden');
      }

      themeToggleBtn.addEventListener('click', () => {
        themeToggleDarkIcon.classList.toggle('hidden');
        themeToggleLightIcon.classList.toggle('hidden');
        document.documentElement.classList.toggle('dark');
        localStorage.setItem('theme', document.documentElement.classList.contains('dark') ? 'dark' : 'light');
      });
    }
  </script>
</Layout>