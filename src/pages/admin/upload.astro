---
import Layout from "@layouts/Layout.astro";
import Navbar from "@components/Navbar.astro";

// Define LyricsTypes for consistency with chords and lyrics pages
interface LyricsTypes {
  url: string;
  title: string;
  lyrics: string | null;
  chords: string | null;
  description: string | null;
  album: string | null;
  artist: string | null;
  category: string | null;
  pub_date: string | null;
  key: string | null;
  tags: string | null;
  primary_language: string | null;
  secondary_languages: string | null;
}

const method = Astro.request.method;
const formData = method === "POST" ? await Astro.request.formData() : null;

let message: string | null = null;

if (method === "POST" && formData) {
  const title = formData.get("title")?.toString() || "";
  const generatedUrl = title
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/(^-|-$)/g, "");

  const song: LyricsTypes = {
    url: generatedUrl,
    title: title,
    lyrics: formData.get("lyrics")?.toString() || null,
    chords: formData.get("chords")?.toString() || null,
    description: formData.get("description")?.toString() || null,
    album: formData.get("album")?.toString() || null,
    artist: formData.get("artist")?.toString() || null,
    category: formData.get("category")?.toString() || null,
    pub_date: formData.get("pub_date")?.toString() || null,
    key: formData.get("key")?.toString() || null,
    tags: formData.get("tags")?.toString() || null,
    primary_language: formData.get("primary_language")?.toString() || null,
    secondary_languages: formData.get("secondary_languages")
      ? Array.from(formData.getAll("secondary_languages")).join(",")
      : null,
  };

  try {
    const db = Astro.locals.runtime.env
      .DB as import("astro").AstroGlobal["locals"]["runtime"]["env"]["DB"];

    await db
      .prepare(
        `
      INSERT INTO songs (
        url, title, lyrics, chords, description, album, artist,
        category, pub_date, key, tags, primary_language, secondary_languages
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `,
      )
      .bind(
        song.url,
        song.title,
        song.lyrics,
        song.chords,
        song.description,
        song.album,
        song.artist,
        song.category,
        song.pub_date,
        song.key,
        song.tags,
        song.primary_language,
        song.secondary_languages,
      )
      .run();

    message = "✅ Song uploaded successfully!";
  } catch (err: any) {
    message = `❌ Error uploading song: ${err.message}`;
  }
}

const musicalKeys = [
  "C",
  "C#",
  "D",
  "D#",
  "E",
  "F",
  "F#",
  "G",
  "G#",
  "A",
  "A#",
  "B",
  "Cm",
  "C#m",
  "Dm",
  "D#m",
  "Em",
  "Fm",
  "F#m",
  "Gm",
  "G#m",
  "Am",
  "A#m",
  "Bm",
];

const indianLanguages = ["English", "Telugu", "Tamil", "Malayalam", "Kannada"];

const isLoggedIn = Astro.cookies.get("session")?.value === "logged_in";

if (!isLoggedIn) {
  return Astro.redirect("/admin/login");
}
---

<Layout
  title="Christian Lyrics"
  description="Collection of Christian worship lyrics"
>

<Navbar/>

  <!-- Include Flowbite CSS and JS -->
  <link
    rel="stylesheet"
    href="https://unpkg.com/flowbite@1.5.3/dist/flowbite.min.css"
  />

  <div class="container mx-auto flex items-center justify-between px-4 py-4">
    <h1 class="text-xl font-bold text-gray-900 dark:text-white">Admin Panel</h1>
    <div class="flex items-center gap-4">
      <button
        id="theme-toggle"
        type="button"
        class="rounded-lg p-2.5 text-sm text-gray-500 hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 focus:outline-none dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-700"
      >
        <svg
          id="theme-toggle-dark-icon"
          class="hidden h-5 w-5"
          fill="currentColor"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
          ><path
            d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
          ></path></svg
        >
        <svg
          id="theme-toggle-light-icon"
          class="hidden h-5 w-5"
          fill="currentColor"
          viewBox="0 0 20 20"
          xmlns="http://www.w3.org/2000/svg"
          ><path
            d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4.586 2.414a1 1 0 011.414 1.414l-.707.707a1 1 0 11-1.414-1.414l.707-.707zM16 10a1 1 0 011-1h1a1 1 0 110 2h-1a1 1 0 01-1-1zm-1.414 4.586a1 1 0 011.414 0l.707.707a1 1 0 01-1.414 1.414l-.707-.707a1 1 0 010-1.414zM10 16a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zm-4.586-1.414a1 1 0 010 1.414l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 0zM3 10a1 1 0 011-1h1a1 1 0 110 2H4a1 1 0 01-1-1zm1.414-4.586l.707-.707a1 1 0 011.414 1.414l-.707.707a1 1 0 01-1.414-1.414zM10 14a4 4 0 100-8 4 4 0 000 8z"
          ></path></svg
        >
      </button>
    </div>
  </div>

  {
    message && (
      <div
        class={`mb-4 rounded-lg p-4 text-sm ${message.startsWith("✅") ? "bg-green-50 text-green-800 dark:bg-green-800 dark:text-green-400" : "bg-red-50 text-red-800 dark:bg-red-800 dark:text-red-400"}`}
        role="alert"
      >
        {message}
      </div>
    )
  }

  <div class="container mx-auto px-4 py-8">
    <div class="rounded-lg bg-white p-6 shadow-md dark:bg-gray-800">
      <h2
        class="mb-6 text-center text-2xl font-bold text-gray-900 dark:text-white"
      >
        Upload New Song
      </h2>

      <form method="POST" class="space-y-6">
        <div class="grid grid-cols-1 gap-6 md:grid-cols-2">
          <div class="space-y-6">
            <div>
              <label
                for="url"
                class="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                >URL (auto-generated)</label
              >
              <input
                type="text"
                name="url"
                id="url"
                disabled
                class="block w-full cursor-not-allowed rounded-lg border border-gray-300 bg-gray-100 p-2.5 text-sm text-gray-900 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-400 dark:placeholder-gray-400"
              />
            </div>

            <div>
              <label
                for="title"
                class="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                >Title*</label
              >
              <input
                type="text"
                name="title"
                id="title"
                required
                class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-400 dark:focus:ring-blue-400"
              />
            </div>

            <div>
              <label
                for="artist"
                class="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                >Artist</label
              >
              <input
                type="text"
                name="artist"
                id="artist"
                class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-400 dark:focus:ring-blue-400"
              />
            </div>

            <div>
              <label
                for="album"
                class="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                >Album</label
              >
              <input
                type="text"
                name="album"
                id="album"
                class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-400 dark:focus:ring-blue-400"
              />
            </div>
          </div>

          <div class="space-y-6">
            <div>
              <label
                for="category"
                class="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                >Category</label
              >
              <input
                type="text"
                name="category"
                id="category"
                class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-400 dark:focus:ring-blue-400"
              />
            </div>

            <div>
              <label
                for="key"
                class="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                >Key</label
              >
              <select
                name="key"
                id="key"
                class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-400 dark:focus:ring-blue-400"
              >
                <option value="">Select Key</option>
                {musicalKeys.map((key) => <option value={key}>{key}</option>)}
              </select>
            </div>

            <div>
              <label
                for="primary_language"
                class="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                >Primary Language*</label
              >
              <select
                name="primary_language"
                id="primary_language"
                required
                class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-400 dark:focus:ring-blue-400"
              >
                <option value="">Select Primary Language</option>
                {
                  indianLanguages.map((lang) => (
                    <option value={lang}>{lang}</option>
                  ))
                }
              </select>
            </div>

            <div>
              <label
                class="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                >Secondary Languages</label
              >
              <div
                class="max-h-40 overflow-y-auto rounded-lg border border-gray-300 p-4 dark:border-gray-600 dark:bg-gray-700"
              >
                {
                  indianLanguages.map((lang) => (
                    <label class="mb-3 flex items-center space-x-3">
                      <input
                        type="checkbox"
                        name="secondary_languages"
                        value={lang}
                        class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800 dark:focus:ring-blue-600"
                      />
                      <span class="text-sm font-medium text-gray-900 dark:text-white">
                        {lang}
                      </span>
                    </label>
                  ))
                }
              </div>
            </div>

            <div>
              <label
                for="tags"
                class="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                >Tags</label
              >
              <input
                type="text"
                name="tags"
                id="tags"
                class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-400 dark:focus:ring-blue-400"
              />
            </div>

            <div>
              <label
                for="pub_date"
                class="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                >Publish Date</label
              >
              <input
                type="datetime-local"
                name="pub_date"
                id="pub_date"
                class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-400 dark:focus:ring-blue-400"
              />
            </div>
          </div>
        </div>

        <div>
          <label
            for="lyrics"
            class="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
            >Lyrics*</label
          >
          <textarea
            name="lyrics"
            id="lyrics"
            required
            rows="10"
            class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-400 dark:focus:ring-blue-400"
            placeholder="Enter lyrics in ChordPro format, e.g., {verse}...{chorus}..."
          ></textarea>
        </div>

        <div>
          <label
            for="chords"
            class="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
            >Chords</label
          >
          <textarea
            name="chords"
            id="chords"
            rows="10"
            class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-400 dark:focus:ring-blue-400"
            placeholder="Enter chords in format: [Verse] *C*Lord *G*we *Am*pray *F*today..."
          ></textarea>
        </div>

        <div>
          <label
            for="description"
            class="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
            >Description</label
          >
          <textarea
            name="description"
            id="description"
            rows="4"
            class="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-400 dark:focus:ring-blue-400"
          ></textarea>
        </div>

        <div class="flex justify-center">
          <button
            type="submit"
            class="rounded-lg bg-blue-700 px-5 py-2.5 text-sm font-medium text-white hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 focus:outline-none dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
          >
            Upload Song
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Flowbite JS -->
  <script src="https://unpkg.com/flowbite@1.5.3/dist/flowbite.min.js"></script>

  <script>
    const titleInput = document.getElementById("title") as HTMLInputElement | null;
    const urlInput = document.getElementById("url") as HTMLInputElement | null;

    if (titleInput && urlInput) {
      titleInput.addEventListener("input", () => {
        const title = titleInput.value;
        const generatedUrl = title
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, "-")
          .replace(/(^-|-$)/g, "");
        urlInput.value = generatedUrl;
      });
    }

    // Dark mode toggle
    const themeToggleBtn = document.getElementById("theme-toggle");
    const themeToggleDarkIcon = document.getElementById(
      "theme-toggle-dark-icon",
    );
    const themeToggleLightIcon = document.getElementById(
      "theme-toggle-light-icon",
    );

    if (themeToggleBtn && themeToggleDarkIcon && themeToggleLightIcon) {
      // Set initial icon state
      const isDark =
        localStorage.getItem("theme") === "dark" ||
        (!localStorage.getItem("theme") &&
          window.matchMedia("(prefers-color-scheme: dark)").matches);

      if (isDark) {
        document.documentElement.classList.add("dark");
        themeToggleLightIcon.classList.remove("hidden");
      } else {
        themeToggleDarkIcon.classList.remove("hidden");
      }

      themeToggleBtn.addEventListener("click", () => {
        themeToggleDarkIcon.classList.toggle("hidden");
        themeToggleLightIcon.classList.toggle("hidden");
        document.documentElement.classList.toggle("dark");
        localStorage.setItem(
          "theme",
          document.documentElement.classList.contains("dark")
            ? "dark"
            : "light",
        );
      });
    }
  </script>
</Layout>
