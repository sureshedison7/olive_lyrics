---
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import ArrowCardSSR from "@components/ArrowCardSSR.astro";
import { SITE } from "@consts";

export const prerender = false;

import type { D1Database } from "@cloudflare/workers-types";

interface Env {
  DB: D1Database;
}

// Pagination settings
const ITEMS_PER_PAGE = 10;

// Get current page from query parameter
const url = new URL(Astro.request.url);
const currentPage = parseInt(url.searchParams.get("page") || "1", 10);
const offset = (currentPage - 1) * ITEMS_PER_PAGE;

let lyrics: any[] = [];
let totalItems = 0;

try {
  const DB = Astro.locals.runtime.env.DB as D1Database;
  
  // Get total count for pagination
  const countResult = await DB.prepare("SELECT COUNT(*) as count FROM songs").first();
  totalItems = countResult ? Number(countResult.count) : 0;
  
  // Get paginated lyrics with ORDER BY pub_date DESC
  const { results } = await DB.prepare(
    `SELECT * FROM songs ORDER BY pub_date DESC LIMIT ? OFFSET ?`
  )
    .bind(ITEMS_PER_PAGE, offset)
    .all();
  lyrics = results;
} catch (error) {
  console.error("Error fetching lyrics:", error);
}

// Calculate total pages
const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);
---

<Layout
  title="Christian Lyrics"
  description="Collection of Christian worship lyrics"
>
  <Container>
    <div class="space-y-6">
      <div class="animate font-semibold text-black dark:text-white">
        Christian Lyrics
      </div>
      {
        lyrics.length > 0 ? (
          <ul class="not-prose flex flex-col gap-4">
            {lyrics.map((lyric) => (
              <li>
                {lyric.LyricPage}
                <ArrowCardSSR
                  lyricsTitle={lyric ? lyric.title : "Lyrics Not Found"}
                  discription={
                    lyric ? lyric.description : "No Lyrics found with this name"
                  }
                  lyricsLink={lyric ? "lyrics/"+lyric.url : "#"}
                />
              </li>
            ))}
          </ul>
        ) : (
          <p>No Lyrics found.</p>
        )
      }

      <!-- Pagination Controls -->
      {totalPages > 1 && (
        <nav class="flex items-center justify-between mt-8" aria-label="Pagination">
          <div class="flex gap-2">
            <!-- Previous Button -->
            <a
              href={currentPage > 1 ? `?page=${currentPage - 1}` : "#"}
              class={`px-4 py-2 rounded-md ${
                currentPage === 1
                  ? "bg-gray-200 text-gray-500 dark:bg-gray-700 dark:text-gray-300 cursor-not-allowed"
                  : "bg-blue-600 text-white dark:bg-blue-500 dark:hover:bg-blue-600 hover:bg-blue-700"
              }`}
              aria-disabled={currentPage === 1}
            >
              Previous
            </a>
            
            <!-- Page Numbers -->
            <div class="flex gap-1">
              {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
                <a
                  href={`?page=${page}`}
                  class={`px-4 py-2 rounded-md ${
                    currentPage === page
                      ? "bg-blue-600 text-white dark:bg-blue-500 dark:text-white"
                      : "bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600"
                  }`}
                  aria-current={currentPage === page ? "page" : undefined}
                >
                  {page}
                </a>
              ))}
            </div>
            
            <!-- Next Button -->
            <a
              href={currentPage < totalPages ? `?page=${currentPage + 1}` : "#"}
              class={`px-4 py-2 rounded-md ${
                currentPage === totalPages
                  ? "bg-gray-200 text-gray-500 dark:bg-gray-700 dark:text-gray-300 cursor-not-allowed"
                  : "bg-blue-600 text-white dark:bg-blue-500 dark:hover:bg-blue-600 hover:bg-blue-700"
              }`}
              aria-disabled={currentPage === totalPages}
            >
              Next
            </a>
          </div>
        </nav>
      )}
    </div>
  </Container>
</Layout>