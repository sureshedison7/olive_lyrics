---
export const prerender = false;
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { BLOG } from "@consts";
import type { LyricsTypes } from "@types";

const { chordsPage } = Astro.params;

let lyricsArticle: LyricsTypes | null = null;
let error: string | null = null;

try {
  const DB = Astro.locals.runtime.env.DB as D1Database;
  const safeLyricPage = typeof chordsPage === "string" ? chordsPage : "";
  const result = await DB.prepare("SELECT * FROM songs WHERE url = ?")
    .bind(decodeURIComponent(safeLyricPage))
    .first();

  if (result) {
    lyricsArticle = result as unknown as LyricsTypes;
  }
} catch (e) {
  console.error("Error fetching lyrics:", e);
  error = "Failed to load lyrics";
}
---

<Layout
  title={`${lyricsArticle?.title || "Lyrics"} - ${lyricsArticle?.artist || ""}`}
  description={lyricsArticle?.description || BLOG.DESCRIPTION}
>
  <Container>
    <!-- Tab Navigation -->
    <div class="flex w-full bg-gray-100 rounded-lg p-1.5 border border-gray-200 shadow-sm dark:bg-gray-800 dark:border-gray-700 mb-6">
      <a
        href={"/lyrics/" + lyricsArticle?.url}
        data-astro-reload
        class="flex-1 flex items-center justify-center gap-2 py-3 px-4 text-center font-medium rounded-md transition-all duration-300 text-gray-600 hover:bg-white hover:text-amber-600 hover:shadow-sm hover:border border-transparent hover:border-amber-100 dark:text-gray-300 dark:hover:bg-gray-700 dark:hover:text-amber-400 dark:hover:border-amber-900"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"
          ></path>
        </svg>
        Lyrics
      </a>

      <a
        href={"/chords/" + lyricsArticle?.url}
        data-astro-reload
        class="flex-1 flex items-center justify-center gap-2 py-3 px-4 text-center font-medium rounded-md transition-all duration-300 bg-white text-indigo-600 shadow-sm border border-indigo-100 dark:bg-gray-700 dark:text-indigo-400 dark:border-indigo-900"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
          ></path>
        </svg>
        Chords
      </a>
    </div>

    {
      error ? (
        <div
          class="my-10 rounded-lg border border-red-200 bg-red-50/80 p-4 dark:border-red-800/50 dark:bg-red-900/20"
        >
          <h1 class="text-xl font-bold text-red-800 dark:text-red-200">
            Error Loading Lyrics
          </h1>
          <p class="mt-2 text-red-600 dark:text-red-300">{error}</p>
        </div>
      ) : lyricsArticle ? (
        <div class="animate my-8">
          <!-- Song Header -->
          <div class="mb-6 flex items-start gap-3">
            <div>
              <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
                {lyricsArticle.title}
              </h1>
              {lyricsArticle.artist && (
                <p class="mt-1 text-lg text-gray-600 dark:text-gray-300">
                  By {lyricsArticle.artist}
                </p>
              )}
            </div>
          </div>

          <!-- Controls Container -->
          <div
            class="flex flex-row sm:flex-row flex-nowrap items-start sm:items-center gap-4 mb-6 p-4 bg-gray-50 rounded-lg dark:bg-gray-800/50"
          >
            <!-- Font Size Controls -->
            <div class="flex justify-center flex-wrap flex-col sm:flex-row items-start sm:items-center gap-2">
              <span class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-0">
                Font Size:
              </span>
              <div class="flex gap-2">
                <button
                  id="font-decrease"
                  class="p-2 text-gray-600 border border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
                  title="Decrease font size"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M5 12h14"></path>
                  </svg>
                </button>
                <button
                  id="font-reset"
                  class="px-3 py-1 text-sm font-medium text-gray-600 border border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
                  title="Reset font size"
                >
                  Reset
                </button>
                <button
                  id="font-increase"
                  class="p-2 text-gray-600 border border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
                  title="Increase font size"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M12 5v14M5 12h14"></path>
                  </svg>
                </button>
              </div>
            </div>
            
            <!-- Transpose Controls -->
            <div class="flex justify-center flex-col sm:flex-row items-start sm:items-center gap-2">
              <span class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 sm:mb-0">
                Transpose:
              </span>
              <div class="flex gap-2">
                <button
                  id="transpose-down"
                  class="p-2 text-gray-600 border border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
                  title="Transpose Down"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M6 9l6 6 6-6"></path>
                  </svg>
                </button>

                <span
                  id="transpose-value"
                  class="px-3 py-1 text-sm font-medium text-gray-700 dark:text-gray-300 border border-gray-300 rounded-md dark:border-gray-600 min-w-[2.5rem] text-center"
                  >0</span>

                <button
                  id="transpose-up"
                  class="p-2 text-gray-600 border border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
                  title="Transpose Up"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M18 15l-6-6-6 6"></path>
                  </svg>
                </button>

                <button
                  id="transpose-reset"
                  class="px-3 py-1 text-sm font-medium text-gray-600 border border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
                >
                  Reset
                </button>

                <!-- Sharp/Flat toggle removed: chords recognize and preserve sharps/flats automatically -->
              </div>
            </div>
          </div>

          <!-- Chords Content -->
          <div
            id="lyrics-content"
            class="lyrics-container mt-8"
            data-chords={lyricsArticle?.chords || ''}
          >
            <div id="processed-chords" class="chord-sheet"></div>
          </div>

          {
            lyricsArticle.pub_date && (
              <div
                class="mt-12 border-t border-gray-200 pt-6 text-sm text-gray-500 dark:border-gray-700 dark:text-gray-400"
              >
                <FormattedDate date={new Date(lyricsArticle.pub_date)} />
              </div>
            )
          }
        </div>
      ) : (
        <div class="animate my-10 p-6 text-center">
          <div class="mb-4 text-indigo-500 dark:text-indigo-400">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="32"
              height="32"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M9 18V5l12-2v13"></path>
              <circle cx="6" cy="18" r="3"></circle>
              <circle cx="18" cy="16" r="3"></circle>
              <path d="M12 8v4"></path>
              <path d="M12 8h.01"></path>
            </svg>
          </div>
          <h1 class="text-2xl font-bold text-gray-900 dark:text-white">
            Chords Not Found
          </h1>
          <p class="mt-2 text-gray-600 dark:text-gray-400">
            No chords found for: {decodeURIComponent(chordsPage || "")}
          </p>
        </div>
      )
    }
  </Container>
</Layout>

<style is:global>
  @import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&family=Source+Code+Pro:wght@400;500&display=swap");

  .lyrics-container {
    font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
  }
  
  .chord-sheet {
    font-size: 1.15rem;
    font-family: "Source Code Pro", monospace;
    white-space: pre-wrap; 
    word-break: break-word;
    color: #333;
    line-height: 1.8;
    background-color: #f9fafb;
    border-radius: 8px;
    padding: 1.5rem;
    overflow-x: auto;
    transition: font-size 0.2s ease;
  }
  
  .dark .chord-sheet {
    color: #e5e7eb;
    background-color: #1f2937;
  }

  .chord-line {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;
    margin-bottom: 0.5rem;
  }

  .chord-word {
    display: flex;
    flex-direction: column;
    margin-right: 0.0rem;
  }
  
  .chord-label {
    vertical-align: text-bottom;
    display: inline-block;
    margin-bottom: 1.4em;
    width: 0;
    white-space: nowrap;
    font-size: 80%;
    font-weight: bold;
    user-select: none;
    position: relative; 
    height: 2em;
    top: 2.5em;
  }
  
  .dark .chord-label {
    color: #818cf8;
  }

  .chord-text {
    display: block;
    background-color: #e2e0ff;
    position: absolute;
    left: 0;
    top: -1.3em;
    padding: 0.1em;
    padding-right: 0.3em;
    padding-left: 0.3em;
    border-radius: 0.3em;
    line-height: 1.75em;
    color: #3730a3;
  }

  .dark .chord-text {
    background-color: #9d9d9d;
    border: 1px solid #9d9d9d;
    color: #060606;
  }

  .lyric-word {
    color: #333;
  }
  
  .dark .lyric-word {
    color: #e5e7eb;
  }

  .section-title {
    font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
    font-weight: 600;
    color: #7c3aed;
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
    font-size: 1.25rem;
    display: block;
  }
  
  .dark .section-title {
    color: #a78bfa;
  }

  @media (max-width: 640px) {
    .chord-sheet {
      font-size: 1rem;
      padding: 1rem;
      line-height: 1.6;
    }
    
    .section-title {
      font-size: 1.1rem;
    }
  }
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const lyricsContent = document.getElementById("lyrics-content");
    const processedChordsElement = document.getElementById("processed-chords");
    
    if (!lyricsContent || !processedChordsElement) {
      console.error("Required elements not found.");
      return;
    }

    const rawChordSheet = lyricsContent.getAttribute('data-chords');
    console.log("Raw chord data:", rawChordSheet);
    
    if (!rawChordSheet) {
        processedChordsElement.textContent = "No chords found for this song.";
        return;
    }

    // Canonical chromatic scale mapping (semitone index)
    const SEMITONE_MAP = {
      'C': 0, 'B#': 0,
      'C#': 1, 'Db': 1,
      'D': 2,
      'D#': 3, 'Eb': 3,
      'E': 4, 'Fb': 4,
      'E#': 5, 'F': 5,
      'F#': 6, 'Gb': 6,
      'G': 7,
      'G#': 8, 'Ab': 8,
      'A': 9,
      'A#': 10, 'Bb': 10,
      'B': 11, 'Cb': 11
    };

    // Preferred render names for each semitone depending on requested accidental style
    const PREFERRED = {
      sharp: ['C','C#','D','D#','E','F','F#','G','G#','A','A#','B'],
      flat:  ['C','Db','D','Eb','E','F','Gb','G','Ab','A','Bb','B']
    };

    let currentTranspose = 0;

    // Regex updated to handle chord extensions and slash chords
    const chordRegex = /\*([A-G](?:#|b)?(?:[^\s\/*]*)?(?:\/[A-G](?:#|b)?(?:[^\s]*)?)?)\*/g;

    function getSemitone(note) {
      return SEMITONE_MAP[note] ?? null;
    }

    function chooseRenderedName(semitone, preferFlat) {
      return preferFlat ? PREFERRED.flat[semitone] : PREFERRED.sharp[semitone];
    }

    function transposeChord(chord, steps) {
      if (!chord || typeof steps !== 'number') return chord;

      // Split chord into root and bass (if present)
      const slashIndex = chord.indexOf('/');
      let root = chord;
      let bass = null;
      if (slashIndex !== -1) {
        root = chord.substring(0, slashIndex);
        bass = chord.substring(slashIndex + 1);
      }

      // Extract root note token and suffix
      const rootMatch = root.match(/^([A-G](?:#|b)?)(.*)$/);
      if (!rootMatch) return chord;
      const rootNote = rootMatch[1];
      const rootSuffix = rootMatch[2] || '';

      const rootSemitone = getSemitone(rootNote);
      if (rootSemitone === null) return chord;

      let newRootIndex = (rootSemitone + steps) % 12;
      if (newRootIndex < 0) newRootIndex += 12;

      // Preserve accidental style: if original had 'b' prefer flat, if '#' prefer sharp, otherwise keep natural preference
      const preferFlatRoot = rootNote.includes('b');
      const newRootName = chooseRenderedName(newRootIndex, preferFlatRoot);

      // Handle bass if present
      if (bass) {
        const bassMatch = bass.match(/^([A-G](?:#|b)?)(.*)$/);
        if (!bassMatch) return `${newRootName}${rootSuffix}/${bass}`;
        const bassNote = bassMatch[1];
        const bassSuffix = bassMatch[2] || '';
        const bassSemitone = getSemitone(bassNote);
        if (bassSemitone === null) return `${newRootName}${rootSuffix}/${bass}`;
        let newBassIndex = (bassSemitone + steps) % 12;
        if (newBassIndex < 0) newBassIndex += 12;
        const preferFlatBass = bassNote.includes('b');
        const newBassName = chooseRenderedName(newBassIndex, preferFlatBass);
        return `${newRootName}${rootSuffix}/${newBassName}${bassSuffix}`;
      }

      return `${newRootName}${rootSuffix}`;
    }

    function processAndDisplaySong(transposeSteps = 0) {
      if (!rawChordSheet) {
        processedChordsElement.textContent = "No chords found for this song.";
        return;
      }

      const lines = rawChordSheet.split('\n');
      let htmlContent = '';
      
      for (let i = 0; i < lines.length; i++) {
        let line = lines[i].trim();
        if (!line) continue;
        
        const isSectionTitle = line.startsWith('[') && line.endsWith(']');
        
        if (isSectionTitle) {
          const title = line.substring(1, line.length - 1);
          htmlContent += `<div class="section-title">${title}</div>`;
        } else {
          chordRegex.lastIndex = 0;
          const hasChords = chordRegex.test(line);
          
          if (!hasChords) {
            htmlContent += `<div class="chord-line"><span class="chord-word"><span class="chord-label">&nbsp;</span><span class="lyric-word">${line}</span></span></div>`;
          } else {
            chordRegex.lastIndex = 0;
            let lineHtml = '<div class="chord-line">';
            let lastIndex = 0;
            let match;
            
            while ((match = chordRegex.exec(line)) !== null) {
              const chordStart = match.index;
              const chordEnd = chordRegex.lastIndex;
              const chord = match[1];
              
              const textBefore = line.substring(lastIndex, chordStart);
              if (textBefore) {
                lineHtml += `<span class="chord-word"><span class="chord-label">&nbsp;</span><span class="lyric-word">${textBefore}</span></span>`;
              }
              
              let nextChordStart = line.length;
              const tempRegex = new RegExp(chordRegex.source, chordRegex.flags);
              tempRegex.lastIndex = chordEnd;
              const nextMatch = tempRegex.exec(line);
              if (nextMatch) {
                nextChordStart = nextMatch.index;
              }
              
              const textAfter = line.substring(chordEnd, nextChordStart);
              const transposedChord = transposeChord(chord, transposeSteps);
              
              lineHtml += `<span class="chord-word"><span class="chord-label"><div class="chord-text">${transposedChord}</div></span><span class="lyric-word">${textAfter}</span></span>`;
              
              lastIndex = nextChordStart;
            }
            
            // Handle remaining text after last chord
            if (lastIndex < line.length) {
              const remainingText = line.substring(lastIndex);
              lineHtml += `<span class="chord-word"><span class="chord-label">&nbsp;</span><span class="lyric-word">${remainingText}</span></span>`;
            }
            
            lineHtml += '</div>';
            htmlContent += lineHtml;
          }
        }
      }
      
      console.log("Processed HTML:", htmlContent);
      processedChordsElement.innerHTML = htmlContent;
    }

    // Event Listeners for Controls
    const increaseBtn = document.getElementById("font-increase");
    const decreaseBtn = document.getElementById("font-decrease");
    const resetBtn = document.getElementById("font-reset");
    const transposeUpBtn = document.getElementById("transpose-up");
    const transposeDownBtn = document.getElementById("transpose-down");
    const transposeResetBtn = document.getElementById("transpose-reset");
    const transposeValue = document.getElementById("transpose-value");
  // Toggle removed: chords detect and preserve accidental style automatically

    const initialFontSize = 1.15;
    let currentFontSize = initialFontSize;
    const sizeStep = 0.1;

    function updateFontSize() {
      processedChordsElement.style.fontSize = `${currentFontSize}rem`;
    }

    if (increaseBtn) {
      increaseBtn.addEventListener("click", () => {
        if (currentFontSize < 1.8) {
          currentFontSize += sizeStep;
          updateFontSize();
        }
      });
    }

    if (decreaseBtn) {
      decreaseBtn.addEventListener("click", () => {
        if (currentFontSize > 0.8) {
          currentFontSize -= sizeStep;
          updateFontSize();
        }
      });
    }

    if (resetBtn) {
      resetBtn.addEventListener("click", () => {
        currentFontSize = initialFontSize;
        updateFontSize();
      });
    }
    
    if (transposeUpBtn) {
      transposeUpBtn.addEventListener("click", () => {
        currentTranspose += 1;
        transposeValue.textContent = currentTranspose > 0 ? `+${currentTranspose}` : currentTranspose.toString();
        processAndDisplaySong(currentTranspose);
      });
    }

    if (transposeDownBtn) {
      transposeDownBtn.addEventListener("click", () => {
        currentTranspose -= 1;
        transposeValue.textContent = currentTranspose > 0 ? `+${currentTranspose}` : currentTranspose.toString();
        processAndDisplaySong(currentTranspose);
      });
    }

    if (transposeResetBtn) {
      transposeResetBtn.addEventListener("click", () => {
        currentTranspose = 0;
        transposeValue.textContent = currentTranspose.toString();
        processAndDisplaySong(currentTranspose);
      });
    }

    // Initialize display
    processAndDisplaySong(0);
  });
</script>