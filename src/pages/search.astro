---
// src/pages/search.astro
import Layout from "../layouts/Layout.astro";

// Get search query from URL params
const query = Astro.url.searchParams.get("q") || "";
type SongResult = {
  id: number;
  title: string;
  excerpt: string;
  description: string;
  url: string;
  pub_date: string | null;
};

export const prerender = false;

import type { D1Database } from "@cloudflare/workers-types";

interface Env {
  DB: D1Database;
}

let results: SongResult[] = [];

if (query) {
  const db = Astro.locals.runtime.env.DB as D1Database;
  // Search across multiple columns in the songs table. Use bound parameters to avoid injection.
  const sql = `
    SELECT id, url, title, description, lyrics, chords, artist, album, tags, key, pub_date
    FROM songs
    WHERE title LIKE ?
      OR lyrics LIKE ?
      OR description LIKE ?
      OR artist LIKE ?
      OR album LIKE ?
  OR tags LIKE ?
  OR "key" LIKE ?
      OR primary_language LIKE ?
      OR secondary_languages LIKE ?
    ORDER BY pub_date DESC
  `;

  const like = `%${query}%`;
  const stmt = db.prepare(sql).bind(like, like, like, like, like, like, like, like, like);

  const allResults = (await stmt.all()).results || [];

  results = allResults.map((row) => ({
    id: Number(row.id),
    title: String(row.title || ""),
    excerpt: String((row.description || row.lyrics || "").toString()).slice(0, 300),
    description: String(row.description || ""),
    url: String(row.url || ""),
    pub_date: row.pub_date ? String(row.pub_date) : null,
  }));
}
---

<Layout
  title="Search Lyrics"
  description="Search for lyrics by title or content"
>
  <main class="container mx-auto p-4">
    <h1 class="mb-6 text-2xl font-bold">Search Lyrics</h1>

    <form method="get" action="/search" class="mb-8">
      <div class="flex gap-2">
        <input
          type="search"
          name="q"
          value={query}
          placeholder="Search for lyrics..."
          class="flex-1 rounded border p-2"
          autofocus
        />
        <button
          type="submit"
          class="rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600"
        >
          Search
        </button>
      </div>
    </form>

    {
      query && (
        <div>
          <h2 class="mb-4 text-xl font-semibold">
            {results.length} results for "{query}"
          </h2>

          {results.length > 0 ? (
            <ul class="space-y-4">
              {results.map((song) => (
                <li class="border-b pb-4">
                  <a
                    href={"/lyrics/" + song.url}
                    class="block rounded p-2 hover:bg-gray-50"
                  >
                    <h3 class="text-lg font-medium text-blue-600">
                      {song.title}
                    </h3>
                    <p class="line-clamp-2 text-gray-600">
                      {song.description || song.excerpt}
                    </p>
                    {song.pub_date && (
                      <time class="text-sm text-gray-500">
                        {new Date(song.pub_date).toLocaleDateString()}
                      </time>
                    )}
                  </a>
                </li>
              ))}
            </ul>
          ) : (
            <p class="text-gray-500">No results found.</p>
          )}
        </div>
      )
    }
  </main>
</Layout>
